#define CUSTOM_SETTINGS
#define INCLUDE_TERMINAL_MODULE

//Define PINS-----------------------------------------------
#define peltier 33
#define fan 13
#define tempSensor 16
#define red 18
#define green 19
#define blue 21

//Libraries-----------------------------------------------
#include <DabbleESP32.h>
#include <OneWire.h>
#include <DallasTemperature.h>

//Connection and Sensor Setups-----------------------------------------------
OneWire oneWire(tempSensor);
DallasTemperature sensors(&oneWire);

String Serialdata = "";
bool dataflag = 0;

//Cooling Values-----------------------------------------------
enum CoolingType {
  None,
  Zamanli,
  Normal
};
CoolingType currentCoolingType = None;

enum CoolingMode{
  Low,
  Medium,
  High
};
CoolingMode currentCoolingMode = Low;

float initialReferanceTemp;
float currentSkinTemperatureC;
float delta;
bool coolingIsActive = false;

//ArduinoIDE Callback Functions-----------------------------------------------
void setup() 
{
  Serial.begin(115200); //We don't need serial connection
  Dabble.begin("MyEsp32"); //Our BLE connection name.

  //Outputs
  pinMode(fan, OUTPUT);
  pinMode(peltier, OUTPUT);
  pinMode(red, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(blue, OUTPUT);

  //Inputs
  pinMode(tempSensor, INPUT);

  //Starting values
  digitalWrite(fan, LOW); //fan always active;
  digitalWrite(peltier, HIGH);
  digitalWrite(red, LOW);
  digitalWrite(green, LOW);
  digitalWrite(blue, LOW);

  //Starting temp sensor and reading current skin temp
  sensors.begin();
  sensors.requestTemperatures();
  initialReferanceTemp = sensors.getTempCByIndex(0); 
  Terminal.print(initialReferanceTemp);
}

void loop() 
{
  HandleInput();
  HandleCooling();
}

//Other Functions-----------------------------------------------
void HandleInput()
{
  Dabble.processInput();

  while (Serial.available() != 0)
  {
    Serialdata = String(Serialdata + char(Serial.read()));
    dataflag = 1;
  }
  if (dataflag == 1)
  {
    Terminal.print(Serialdata);
    Serialdata = "";
    dataflag = 0;
  }
  if (Terminal.available() != 0)
  {
    while (Terminal.available() != 0)
    {
      String receivedString = Terminal.readString();

     if(receivedString == "Zamanli")
     {
      Terminal.print("Zamanli sogutma basliyor.");
      delay(2000);
      Terminal.print("Zamanli sogutma basladi.");
      currentCoolingType = Zamanli;
      delay(200);
     }
     else if(receivedString == "Normal")
     {
      Terminal.print("Normal sogutma basliyor.");
      delay(2000);
      Terminal.print("Normal sogutma basladi."); 
      currentCoolingType = Normal;
      delay(200);
     }
     else if(receivedString == "Stop")
     {
      Terminal.print("Sogutma durdulurdu.");
      currentCoolingType = None;
      delay(200);
     }
     else if(receivedString == "Durma")
     {
      digitalWrite(peltier, LOW);
     }

     if(receivedString == "Low")
     {
      Terminal.print("Düşük sogutma modu.");
      Serial.print("Low Mode");
      currentCoolingMode = Low;
      delay(200);
     }
     else if(receivedString == "Medium")
     {
      Terminal.print("Orta sogutma modu.");
      Serial.print("Medium Mode");
      currentCoolingMode = Medium;
      delay(200);
     }
     else if(receivedString == "High")
     {
      Terminal.print("Yüksek sogutma modu.");
      Serial.print("High Mode");
      currentCoolingMode = High;
      delay(200);
     }
      Serial.println(receivedString);
    }
    Serial.println();
  }
}

void HandleCooling()
{
  if(currentCoolingType == Zamanli)
  {
    unsigned long startMilis;
    unsigned long currentMilis;
    int timer;
    int cooldown;


    switch(currentCoolingMode)
    {
      case Low:
      timer = 5000;  
      cooldown = 10000; 
      break;
      case Medium:
      timer = 7000; 
      cooldown = 12000; 
      break;
      case High:
      timer = 10000; 
      cooldown = 15000; 
      break;
    }

    if(digitalRead(red) == HIGH || digitalRead(green) == HIGH)
    {
      RGB(0,0,1);
    }

    startMilis = millis();
    while(millis() - startMilis < timer)
    {
      digitalWrite(peltier, LOW);
      ReadAndSendTemp();
      delay(1000);
    }

    if(digitalRead(blue) == HIGH || digitalRead(green) == HIGH)
    {
      RGB(1,0,0);
    }

    startMilis = millis();
    while (millis() - startMilis < cooldown)
    {
      digitalWrite(peltier, HIGH);
      ReadAndSendTemp();
      delay(1000);
    }
  }
  else if(currentCoolingType == Normal)
  {
    ReadAndSendTemp();

    switch(currentCoolingMode)
    {
      case Low:
      delta = 2;
      break;
      case Medium:
      delta = 3;
      break;
      case High:
      delta = 4;
      break;
    }

    float stopCoolingTemp = initialReferanceTemp - delta; //Like 30
    float restartCoolingTemp = initialReferanceTemp - (delta/4); //Like 34.5

    if(coolingIsActive)
    {
      if(currentSkinTemperatureC <= stopCoolingTemp)
      {
        coolingIsActive = false;
        digitalWrite(peltier, HIGH);//Peltier stopped.
        RGB(1,0,0);
      }
    }
    else
    {
      if(currentSkinTemperatureC >= restartCoolingTemp)
      {
        coolingIsActive = true;
        digitalWrite(peltier, LOW);
        RGB(0,0,1);
      }
    }

    ReadAndSendTemp();
    delay(500);
  }
  else if(currentCoolingType == None)
  {
    digitalWrite(peltier,HIGH);
    RGB(0,1,0);
  }
}

void RGB(bool r, bool g, bool b)
{
  digitalWrite(red, r ? HIGH : LOW);
  digitalWrite(green, g ? HIGH : LOW);
  digitalWrite(blue, b ? HIGH : LOW);
  delay(100);
}

void ReadAndSendTemp()
{
  sensors.requestTemperatures(); 
  currentSkinTemperatureC = sensors.getTempCByIndex(0);
  Serial.print(currentSkinTemperatureC);
  Serial.println("ºC");
  Terminal.print(currentSkinTemperatureC);
}
